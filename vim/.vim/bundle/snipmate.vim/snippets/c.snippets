# main()
snippet main
	int main(int argc, char **argv)
	{
		${1}
		return EXIT_SUCCESS;
	}
snippet mainn
	int main(void)
	{
		${1}
		return EXIT_SUCCESS;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('_$1_H_', 'UNTITLED_H'))`}
	#define $1

	${2}

	#endif /* $1 */
# If Condition
snippet if
	if (${1:/* condition */})
	{
		${2:/* code */}
	}
snippet el
	else
	{
		${1}
	}
# Ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do
	{
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
	{
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1}
	{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
# This is kind of convenient
snippet .
	[${1}]${2}
# Implementations of ANSI C Standard Library routines
snippet fopen
	fopen(${1:filename}, "${2:rb}");${3}
snippet freopen
	freopen(${1:filename}, "${2:rb}", ${3:stream});${4}
snippet fflush
	fflush(${1:stream});${2}
snippet fclose
	fclose(${1:stream});${2}
snippet remove
	remove(${1:filename});${2}
snippet rename
	rename(${1:oldname}, ${2:newname});${3}
snippet tmpfile
	tmpfile()${1}
snippet tmpnam
	tmpnam(${1:s});${2}
snippet setvbuf
	setvbuf(${1:stream}, ${2:buf}, ${3:_IOBF}, ${4:size});${5}
snippet setbuf
	setbuf(${1:stream}, ${2:buf});${3}
snippet printf
	printf("${1:%s}\n"${2});${3}
snippet fprintf
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet sprintf
	sprintf(${1:dest}, "${2:%s\n}"${3});${4}
snippet vprintf
	vprintf("${1:%s\n}", ${2:args});${3}
snippet vfprintf
	vprintf(${1:stderr}, "${2:%s\n}", ${3:args});${4}
snippet vsprintf
	vprintf(${1:s}, "${2:%s\n}", ${3:args});${4}
snippet fscanf
	fscanf(${1:stream}, "${2:%s}"${3});${4}
snippet scanf
	scanf("${1:%s}"${2});${3}
snippet sscanf
	sscanf(${1:s}, "${2:%s}"${3});${4}
snippet fgetc
	fgetc(${1:stream});${2}
snippet fgets
	fgets(${1:s}, ${2:len}, ${3:stream});${4}
snippet fputc
	fputc(${1:c}, ${2:stream});${3}
snippet fputs
	fputs(${1:s}, ${2:stream});${3}
snippet getc
	getc(${1:stream});${2}
snippet getchar
	getchar();${1}
snippet gets
	gets(${1:s});${2}
snippet putc
	putc(${1:c}, ${2:stream});${3}
snippet putchar
	putchar(${1:c});${2}
snippet puts
	puts(${1:s});${2}
snippet ungetc
	ungetc(${1:c}, ${2:stream});${3}
snippet fread
	fread(${1:dest}, ${2:sizeof(char)}, ${3:nobj}, ${4:stream});${5}
snippet fwrite
	fwrite(${1:src}, ${2:sizeof(char)}, ${3:nobj}, ${4:stream});${5}
snippet fseek
	fseek(${1:stream}, ${2:offset}, ${3:SEEK_SET});${4}
snippet ftell
	ftell(${1:stream});${2}
snippet rewind
	rewind(${1:stream});${2}
snippet fgetpos
	fgetpos(${1:stream}, ${2:ptr});${3}
snippet fsetpos
	fsetpos(${1:stream}, ${2:ptr});${3}
snippet clearerr
	clearerr(${1:stream});${2}
snippet feof
	feof(${1:stream});${2}
snippet ferror
	ferror(${1:stream});${2}
snippet perror
	perror(${1:s});${2}
snippet isalnum
	isalnum(${1:c});${2}
snippet isalpha
	isalpha(${1:c});${2}
snippet iscntrl
	iscntrl(${1:c});${2}
snippet isdigit
	isdigit(${1:c});${2}
snippet isgraph
	isgraph(${1:c});${2}
snippet islower
	islower(${1:c});${2}
snippet isupper
	isupper(${1:c});${2}
snippet isprint
	isprint(${1:c});${2}
snippet ispunct
	ispunct(${1:c});${2}
snippet isspace
	isspace(${1:c});${2}
snippet isxdigit
	isxdigit(${1:c});${2}
snippet toupper
	toupper(${1:c});${2}
snippet tolower
	tolower(${1:c});${2}
